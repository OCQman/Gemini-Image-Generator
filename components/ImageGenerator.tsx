
import React, { useState } from 'react';
import Spinner from './Spinner';

interface ImageGeneratorProps {
  onGenerate: (prompt: string) => void;
  imageUrl: string | null;
  isLoading: boolean;
  error: string | null;
}

const ImageGenerator: React.FC<ImageGeneratorProps> = ({ onGenerate, imageUrl, isLoading, error }) => {
  const [prompt, setPrompt] = useState<string>('');

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (prompt.trim() && !isLoading) {
      onGenerate(prompt);
    }
  };

  return (
    <div className="w-full max-w-2xl text-center">
      <div className="bg-gray-800 rounded-xl shadow-2xl p-6 md:p-8 border border-gray-700">
        <h2 className="text-xl md:text-2xl font-semibold mb-4 text-gray-200">Create an Image from a Prompt</h2>
        <p className="text-gray-400 mb-6">Describe anything you can imagine, and let AI bring it to life.</p>
        <form onSubmit={handleSubmit} className="flex flex-col sm:flex-row gap-3">
          <input
            type="text"
            value={prompt}
            onChange={(e) => setPrompt(e.target.value)}
            placeholder="e.g., A futuristic city skyline at sunset"
            className="flex-grow p-3 bg-gray-700 border border-gray-600 rounded-md focus:ring-2 focus:ring-purple-500 focus:border-purple-500 focus:outline-none transition duration-200 text-white placeholder-gray-500"
            disabled={isLoading}
          />
          <button
            type="submit"
            disabled={isLoading || !prompt.trim()}
            className="p-3 font-semibold text-white bg-gradient-to-r from-purple-600 to-pink-600 rounded-md hover:from-purple-700 hover:to-pink-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-pink-500 disabled:opacity-50 disabled:cursor-not-allowed transition duration-200 flex items-center justify-center"
          >
            {isLoading ? (
              <>
                <Spinner />
                Generating...
              </>
            ) : (
              'Generate'
            )}
          </button>
        </form>
      </div>

      <div className="mt-8 w-full p-4 bg-gray-800/50 border border-gray-700 rounded-xl aspect-square flex items-center justify-center">
        {isLoading && <Spinner size="lg" />}
        {error && <p className="text-red-400 p-4 bg-red-900/50 rounded-lg">{error}</p>}
        {imageUrl && !isLoading && !error && (
          <img
            src={imageUrl}
            alt="Generated by AI"
            className="rounded-lg shadow-lg object-contain max-w-full max-h-full"
          />
        )}
        {!isLoading && !error && !imageUrl && (
          <div className="text-gray-500 flex flex-col items-center">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-16 w-16 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={1}>
                <path strokeLinecap="round" strokeLinejoin="round" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
            </svg>
            <p>Your generated image will appear here.</p>
          </div>
        )}
      </div>
    </div>
  );
};

export default ImageGenerator;
